// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL")
    directUrl         = env("POSTGRES_URL_NON_POOLING")
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model TimeTracking {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    userId      String
    start       DateTime
    end         DateTime?
    duration    Int?      @default(0)
    description String?
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    taskId      String?
    Task        Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
    projectId   String?
    Project     Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
}

model Task {
    id            String         @id @default(cuid())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    name          String
    TimeTrackings TimeTracking[]
}

model Project {
    id            String         @id @default(cuid())
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    name          String
    TimeTrackings TimeTracking[]
}

model WorkTimeCache {
    id            String @id @default(cuid())
    userId        String
    month         Int
    year          Int
    actualInSec   Int
    requiredInSec Int
    user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String          @id @default(cuid())
    name              String?
    email             String?         @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    TimeTracking      TimeTracking[]
    WorkTimeCache     WorkTimeCache[]
    WorkHoursPerMonth Int             @default(60)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
